////////////////////////////////////////////////////////////////////////////////
/*
	WDBlendOptions.m
	Inkpad

	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.

	Project Copyright (c) 2009-2014 Steve Sprang
*/
////////////////////////////////////////////////////////////////////////////////

#import "WDBlendOptions.h"
#import "WDUtilities.h"

////////////////////////////////////////////////////////////////////////////////

NSString *const WDBlendOptionsKey = @"WDBlendOptions";
NSString *const WDBlendModeKey = @"WDBlendMode";
NSString *const WDBlendOpacityKey = @"WDBlendOpacity";

////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
@implementation WDBlendOptions
////////////////////////////////////////////////////////////////////////////////

@synthesize mode = mMode;
@synthesize opacity = mOpacity;

////////////////////////////////////////////////////////////////////////////////

- (id) init
{
	self = [super init];
	if (self != nil)
	{
		[self setDefaults];
	}

	return self;
}

////////////////////////////////////////////////////////////////////////////////

- (id) initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self != nil)
	{
		[self setDefaults];

		if ([coder containsValueForKey:WDBlendModeKey])
		{ mMode = [coder decodeIntegerForKey:WDBlendModeKey]; }

		if ([coder containsValueForKey:WDBlendOpacityKey])
		{ mOpacity = [coder decodeFloatForKey:WDBlendOpacityKey]; }
	}

	return self;
}

////////////////////////////////////////////////////////////////////////////////

- (void) setDefaults
{
	mMode = kCGBlendModeNormal;
	mOpacity = 1.0;
}

////////////////////////////////////////////////////////////////////////////////

- (void) applyInContext:(CGContextRef)context
{
	CGContextSetBlendMode(context, [self mode]);
	CGContextSetAlpha(context, [self opacity]);
}

////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////
@end
////////////////////////////////////////////////////////////////////////////////



