////////////////////////////////////////////////////////////////////////////////
/*
	WDFillOptions.m
	Inkpad

	This Source Code Form is subject to the terms of the Mozilla Public
	License, v. 2.0. If a copy of the MPL was not distributed with this
	file, You can obtain one at http://mozilla.org/MPL/2.0/.

	Project Copyright (c) 2009-2014 Steve Sprang
*/
////////////////////////////////////////////////////////////////////////////////

#import "WDFillOptions.h"
#import "WDUtilities.h"

////////////////////////////////////////////////////////////////////////////////

NSString *const WDFillOptionsKey = @"WDFillOptions";
NSString *const WDFillActiveKey = @"WDFillActive";
NSString *const WDFillColorKey = @"WDFillColor";
NSString *const WDFillRuleKey = @"WDFillRule";

////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
@implementation WDFillOptions
////////////////////////////////////////////////////////////////////////////////

@synthesize active = mActive;
@synthesize color = mColor;

////////////////////////////////////////////////////////////////////////////////

- (void) initProperties
{
	mActive = YES;
}

////////////////////////////////////////////////////////////////////////////////

- (void) copyPropertiesFrom:(WDFillOptions *)src
{
	self->mActive = src->mActive;
	self->mColor = src->mColor;
	self->mFillRule = src->mFillRule;
}

////////////////////////////////////////////////////////////////////////////////

- (void) encodeWithCoder:(NSCoder *)coder
{
	[coder encodeBool:mActive forKey:WDFillActiveKey];
	[coder encodeObject:mColor forKey:WDFillColorKey];
	[coder encodeInt:mFillRule forKey:WDFillRuleKey];
}

////////////////////////////////////////////////////////////////////////////////

- (void) decodeWithCoder:(NSCoder *)coder
{
	if ([coder containsValueForKey:WDFillActiveKey])
	{ mActive = [coder decodeBoolForKey:WDFillActiveKey]; }

	if ([coder containsValueForKey:WDFillColorKey])
	{ mColor = [coder decodeObjectForKey:WDFillColorKey]; }

	if ([coder containsValueForKey:WDFillRuleKey])
	{ mFillRule = [coder decodeObjectForKey:WDFillRuleKey]; }
}

////////////////////////////////////////////////////////////////////////////////

- (BOOL) visible
{ return mActive && (mColor != nil) && (mColor.alpha > 0.0); }

////////////////////////////////////////////////////////////////////////////////

- (id) optionsWithScale:(float)scale
{
	return self;
}

////////////////////////////////////////////////////////////////////////////////

- (void) prepareCGContext:(CGContextRef)context
{
	if ([self visible])
	{
		CGContextSetFillColorWithColor(context, [self color].CGColor);
	}
}

////////////////////////////////////////////////////////////////////////////////
@end
////////////////////////////////////////////////////////////////////////////////



